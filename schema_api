enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

type _QueryMeta {
  count: Int!
}

input CreatePost {
  description: String
  likes: Int
  title: String
  url: String
}

type HelloPayload {
  message: String!
}

input InvokeFunctionInput {
  name: String!
  input: String!
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String!
  clientMutationId: String
}

type Mutation {
  createPost(description: String, likes: Int, title: String, url: String): Post
  updatePost(
    description: String
    id: ID!
    likes: Int
    title: String
    url: String
  ): Post
  updateOrCreatePost(update: UpdatePost!, create: CreatePost!): Post
  deletePost(id: ID!): Post
  invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
}

interface Node {
  id: ID!
}

type Post implements Node {
  description: String
  id: ID!
  likes: Int
  title: String
  url: String
}

input PostFilter {
  AND: [PostFilter!]
  OR: [PostFilter!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

enum PostOrderBy {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  likes_ASC
  likes_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
}

type PostPreviousValues {
  description: String
  id: ID!
  likes: Int
  title: String
  url: String
}

input PostSubscriptionFilter {
  AND: [PostSubscriptionFilter!]
  OR: [PostSubscriptionFilter!]
  mutation_in: [_ModelMutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostSubscriptionFilterNode
}

input PostSubscriptionFilterNode {
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

type PostSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

type Query {
  allPosts(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]!
  _allPostsMeta(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  Post(id: ID): Post
  hello(name: String): HelloPayload
  node(id: ID!): Node
}

type Subscription {
  Post(filter: PostSubscriptionFilter): PostSubscriptionPayload
}

input UpdatePost {
  description: String
  id: ID!
  likes: Int
  title: String
  url: String
}


